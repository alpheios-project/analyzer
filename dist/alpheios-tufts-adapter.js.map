{"version":3,"file":"alpheios-tufts-adapter.js","sources":["../node_modules/alpheios-morph-client/dist/alpheios-morph-client.js","../../data-models/dist/alpheios-data-models.js","../src/lib/lib.js","../src/lib/engine/whitakers.js","../src/lib/engine/morpheusgrc.js","../src/lib/engine/aramorph.js","../src/lib/engine/data/test-data.js","../src/adapter.js"],"sourcesContent":["/**\n * Base Adapter Class for a Morphology Service Client\n */\nclass BaseAdapter {\n  /**\n   * Method which is used to prepare a lookup request according\n   * to the adapter specific logic\n   * @param {string} lang - the language code\n   * @param {string} word - the word to lookup\n   * @returns {string} the url for the request\n   */\n  prepareRequestUrl (lang, word) {\n      /** must be overridden in the adapter implementation class **/\n    return null\n  }\n\n  /**\n   * Fetch response from a remote URL\n   * @param {string} lang - the language code\n   * @param {string} word - the word to lookup\n   * @returns {Promise} a promse which if successful resolves to json response object\n   *                    with the results of the analysis\n   */\n  fetch (lang, word) {\n    let url = this.prepareRequestUrl(lang, word);\n    return new Promise((resolve, reject) => {\n      window.fetch(url).then(\n          function (response) {\n            let json = response.json();\n            resolve(json);\n          }\n        ).catch((error) => {\n          reject(error);\n        }\n        );\n    })\n  }\n\n  /**\n   * Fetch test data to test the adapter\n   * @param {string} lang - the language code\n   * @param {string} word - the word to lookup\n   * @returns {Promise} a promse which if successful resolves to json response object\n   *                    with the test data\n   */\n  fetchTestData (lang, word) {\n    return new Promise((resolve, reject) => {\n      try {\n        let data = {};\n        resolve(data);\n      } catch (error) {\n        reject(error);\n      }\n    })\n  }\n\n  /**\n   * A function that maps a morphological service's specific data types and values into an inflection library standard.\n   * @param {object} jsonObj - A JSON data from the fetch request\n   * @param {object} targetWord - the original target word of the analysis\n   * @returns {Homonym} A library standard Homonym object.\n   */\n  transform (jsonObj, targetWord) {\n    return {}\n  }\n}\n\nexport default BaseAdapter;\n//# sourceMappingURL=alpheios-morph-client.js.map\n","/* eslint-disable no-unused-vars */\nconst LANG_UNIT_WORD = Symbol('word');\nconst LANG_UNIT_CHAR = Symbol('char');\nconst LANG_DIR_LTR = Symbol('ltr');\nconst LANG_DIR_RTL = Symbol('rtl');\nconst LANG_LATIN = Symbol('latin');\nconst LANG_GREEK = Symbol('greek');\nconst LANG_ARABIC = Symbol('arabic');\nconst LANG_PERSIAN = Symbol('persian');\nconst STR_LANG_CODE_LAT = 'lat';\nconst STR_LANG_CODE_LA = 'la';\nconst STR_LANG_CODE_GRC = 'grc';\nconst STR_LANG_CODE_ARA = 'ara';\nconst STR_LANG_CODE_AR = 'ar';\nconst STR_LANG_CODE_FAR = 'far';\nconst STR_LANG_CODE_PER = 'per';\n// parts of speech\nconst POFS_ADJECTIVE = 'adjective';\nconst POFS_ADVERB = 'adverb';\nconst POFS_ADVERBIAL = 'adverbial';\nconst POFS_ARTICLE = 'article';\nconst POFS_CONJUNCTION = 'conjunction';\nconst POFS_EXCLAMATION = 'exclamation';\nconst POFS_INTERJECTION = 'interjection';\nconst POFS_NOUN = 'noun';\nconst POFS_NUMERAL = 'numeral';\nconst POFS_PARTICLE = 'particle';\nconst POFS_PREFIX = 'prefix';\nconst POFS_PREPOSITION = 'preposition';\nconst POFS_PRONOUN = 'pronoun';\nconst POFS_SUFFIX = 'suffix';\nconst POFS_SUPINE = 'supine';\nconst POFS_VERB = 'verb';\nconst POFS_VERB_PARTICIPLE = 'verb participle';\n// gender\nconst GEND_MASCULINE = 'masculine';\nconst GEND_FEMININE = 'feminine';\nconst GEND_NEUTER = 'neuter';\nconst GEND_COMMON = 'common';\nconst GEND_ANIMATE = 'animate';\nconst GEND_INANIMATE = 'inanimate';\n// Polish gender types\nconst GEND_PERSONAL_MASCULINE = 'personal masculine';\nconst GEND_ANIMATE_MASCULINE = 'animate masculine';\nconst GEND_INANIMATE_MASCULINE = 'inanimate masculine';\n// comparative\nconst COMP_POSITIVE = 'positive';\nconst COMP_COMPARITIVE = 'comparative';\nconst COMP_SUPERLATIVE = 'superlative';\n// case\nconst CASE_ABESSIVE = 'abessive';\nconst CASE_ABLATIVE = 'ablative';\nconst CASE_ABSOLUTIVE = 'absolutive';\nconst CASE_ACCUSATIVE = 'accusative';\nconst CASE_ADDIRECTIVE = 'addirective';\nconst CASE_ADELATIVE = 'adelative';\nconst CASE_ADESSIVE = 'adessive';\nconst CASE_ADVERBIAL = 'adverbial';\nconst CASE_ALLATIVE = 'allative';\nconst CASE_ANTESSIVE = 'antessive';\nconst CASE_APUDESSIVE = 'apudessive';\nconst CASE_AVERSIVE = 'aversive';\nconst CASE_BENEFACTIVE = 'benefactive';\nconst CASE_CARITIVE = 'caritive';\nconst CASE_CAUSAL = 'causal';\nconst CASE_CAUSAL_FINAL = 'causal-final';\nconst CASE_COMITATIVE = 'comitative';\nconst CASE_DATIVE = 'dative';\nconst CASE_DELATIVE = 'delative';\nconst CASE_DIRECT = 'direct';\nconst CASE_DISTRIBUTIVE = 'distributive';\nconst CASE_DISTRIBUTIVE_TEMPORAL = 'distributive-temporal';\nconst CASE_ELATIVE = 'elative';\nconst CASE_ERGATIVE = 'ergative';\nconst CASE_ESSIVE = 'essive';\nconst CASE_ESSIVE_FORMAL = 'essive-formal';\nconst CASE_ESSIVE_MODAL = 'essive-modal';\nconst CASE_EQUATIVE = 'equative';\nconst CASE_EVITATIVE = 'evitative';\nconst CASE_EXESSIVE = 'exessive';\nconst CASE_FINAL = 'final';\nconst CASE_FORMAL = 'formal';\nconst CASE_GENITIVE = 'genitive';\nconst CASE_ILLATIVE = 'illative';\nconst CASE_INELATIVE = 'inelative';\nconst CASE_INESSIVE = 'inessive';\nconst CASE_INSTRUCTIVE = 'instructive';\nconst CASE_INSTRUMENTAL = 'instrumental';\nconst CASE_INSTRUMENTAL_COMITATIVE = 'instrumental-comitative';\nconst CASE_INTRANSITIVE = 'intransitive';\nconst CASE_LATIVE = 'lative';\nconst CASE_LOCATIVE = 'locative';\nconst CASE_MODAL = 'modal';\nconst CASE_MULTIPLICATIVE = 'multiplicative';\nconst CASE_NOMINATIVE = 'nominative';\nconst CASE_PARTITIVE = 'partitive';\nconst CASE_PEGATIVE = 'pegative';\nconst CASE_PERLATIVE = 'perlative';\nconst CASE_POSSESSIVE = 'possessive';\nconst CASE_POSTELATIVE = 'postelative';\nconst CASE_POSTDIRECTIVE = 'postdirective';\nconst CASE_POSTESSIVE = 'postessive';\nconst CASE_POSTPOSITIONAL = 'postpositional';\nconst CASE_PREPOSITIONAL = 'prepositional';\nconst CASE_PRIVATIVE = 'privative';\nconst CASE_PROLATIVE = 'prolative';\nconst CASE_PROSECUTIVE = 'prosecutive';\nconst CASE_PROXIMATIVE = 'proximative';\nconst CASE_SEPARATIVE = 'separative';\nconst CASE_SOCIATIVE = 'sociative';\nconst CASE_SUBDIRECTIVE = 'subdirective';\nconst CASE_SUBESSIVE = 'subessive';\nconst CASE_SUBELATIVE = 'subelative';\nconst CASE_SUBLATIVE = 'sublative';\nconst CASE_SUPERDIRECTIVE = 'superdirective';\nconst CASE_SUPERESSIVE = 'superessive';\nconst CASE_SUPERLATIVE = 'superlative';\nconst CASE_SUPPRESSIVE = 'suppressive';\nconst CASE_TEMPORAL = 'temporal';\nconst CASE_TERMINATIVE = 'terminative';\nconst CASE_TRANSLATIVE = 'translative';\nconst CASE_VIALIS = 'vialis';\nconst CASE_VOCATIVE = 'vocative';\nconst MOOD_ADMIRATIVE = 'admirative';\nconst MOOD_COHORTATIVE = 'cohortative';\nconst MOOD_CONDITIONAL = 'conditional';\nconst MOOD_DECLARATIVE = 'declarative';\nconst MOOD_DUBITATIVE = 'dubitative';\nconst MOOD_ENERGETIC = 'energetic';\nconst MOOD_EVENTIVE = 'eventive';\nconst MOOD_GENERIC = 'generic';\nconst MOOD_GERUNDIVE = 'gerundive';\nconst MOOD_HYPOTHETICAL = 'hypothetical';\nconst MOOD_IMPERATIVE = 'imperative';\nconst MOOD_INDICATIVE = 'indicative';\nconst MOOD_INFERENTIAL = 'inferential';\nconst MOOD_INFINITIVE = 'infinitive';\nconst MOOD_INTERROGATIVE = 'interrogative';\nconst MOOD_JUSSIVE = 'jussive';\nconst MOOD_NEGATIVE = 'negative';\nconst MOOD_OPTATIVE = 'optative';\nconst MOOD_PARTICIPLE = 'participle';\nconst MOOD_PRESUMPTIVE = 'presumptive';\nconst MOOD_RENARRATIVE = 'renarrative';\nconst MOOD_SUBJUNCTIVE = 'subjunctive';\nconst MOOD_SUPINE = 'supine';\nconst NUM_SINGULAR = 'singular';\nconst NUM_PLURAL = 'plural';\nconst NUM_DUAL = 'dual';\nconst NUM_TRIAL = 'trial';\nconst NUM_PAUCAL = 'paucal';\nconst NUM_SINGULATIVE = 'singulative';\nconst NUM_COLLECTIVE = 'collective';\nconst NUM_DISTRIBUTIVE_PLURAL = 'distributive plural';\nconst NRL_CARDINAL = 'cardinal';\nconst NRL_ORDINAL = 'ordinal';\nconst NRL_DISTRIBUTIVE = 'distributive';\nconst NURL_NUMERAL_ADVERB = 'numeral adverb';\nconst ORD_1ST = '1st';\nconst ORD_2ND = '2nd';\nconst ORD_3RD = '3rd';\nconst ORD_4TH = '4th';\nconst ORD_5TH = '5th';\nconst ORD_6TH = '6th';\nconst ORD_7TH = '7th';\nconst ORD_8TH = '8th';\nconst ORD_9TH = '9th';\nconst TENSE_AORIST = 'aorist';\nconst TENSE_FUTURE = 'future';\nconst TENSE_FUTURE_PERFECT = 'future perfect';\nconst TENSE_IMPERFECT = 'imperfect';\nconst TENSE_PAST_ABSOLUTE = 'past absolute';\nconst TENSE_PERFECT = 'perfect';\nconst TENSE_PLUPERFECT = 'pluperfect';\nconst TENSE_PRESENT = 'present';\nconst VKIND_TO_BE = 'to be';\nconst VKIND_COMPOUNDS_OF_TO_BE = 'compounds of to be';\nconst VKIND_TAKING_ABLATIVE = 'taking ablative';\nconst VKIND_TAKING_DATIVE = 'taking dative';\nconst VKIND_TAKING_GENITIVE = 'taking genitive';\nconst VKIND_TRANSITIVE = 'transitive';\nconst VKIND_INTRANSITIVE = 'intransitive';\nconst VKIND_IMPERSONAL = 'impersonal';\nconst VKIND_DEPONENT = 'deponent';\nconst VKIND_SEMIDEPONENT = 'semideponent';\nconst VKIND_PERFECT_DEFINITE = 'perfect definite';\nconst VOICE_ACTIVE = 'active';\nconst VOICE_PASSIVE = 'passive';\nconst VOICE_MEDIOPASSIVE = 'mediopassive';\nconst VOICE_IMPERSONAL_PASSIVE = 'impersonal passive';\nconst VOICE_MIDDLE = 'middle';\nconst VOICE_ANTIPASSIVE = 'antipassive';\nconst VOICE_REFLEXIVE = 'reflexive';\nconst VOICE_RECIPROCAL = 'reciprocal';\nconst VOICE_CAUSATIVE = 'causative';\nconst VOICE_ADJUTATIVE = 'adjutative';\nconst VOICE_APPLICATIVE = 'applicative';\nconst VOICE_CIRCUMSTANTIAL = 'circumstantial';\nconst VOICE_DEPONENT = 'deponent';\nconst TYPE_IRREGULAR = 'irregular';\nconst TYPE_REGULAR = 'regular';\n/* eslit-enable no-unused-vars */\n\n\nvar constants = Object.freeze({\n\tLANG_UNIT_WORD: LANG_UNIT_WORD,\n\tLANG_UNIT_CHAR: LANG_UNIT_CHAR,\n\tLANG_DIR_LTR: LANG_DIR_LTR,\n\tLANG_DIR_RTL: LANG_DIR_RTL,\n\tLANG_LATIN: LANG_LATIN,\n\tLANG_GREEK: LANG_GREEK,\n\tLANG_ARABIC: LANG_ARABIC,\n\tLANG_PERSIAN: LANG_PERSIAN,\n\tSTR_LANG_CODE_LAT: STR_LANG_CODE_LAT,\n\tSTR_LANG_CODE_LA: STR_LANG_CODE_LA,\n\tSTR_LANG_CODE_GRC: STR_LANG_CODE_GRC,\n\tSTR_LANG_CODE_ARA: STR_LANG_CODE_ARA,\n\tSTR_LANG_CODE_AR: STR_LANG_CODE_AR,\n\tSTR_LANG_CODE_FAR: STR_LANG_CODE_FAR,\n\tSTR_LANG_CODE_PER: STR_LANG_CODE_PER,\n\tPOFS_ADJECTIVE: POFS_ADJECTIVE,\n\tPOFS_ADVERB: POFS_ADVERB,\n\tPOFS_ADVERBIAL: POFS_ADVERBIAL,\n\tPOFS_ARTICLE: POFS_ARTICLE,\n\tPOFS_CONJUNCTION: POFS_CONJUNCTION,\n\tPOFS_EXCLAMATION: POFS_EXCLAMATION,\n\tPOFS_INTERJECTION: POFS_INTERJECTION,\n\tPOFS_NOUN: POFS_NOUN,\n\tPOFS_NUMERAL: POFS_NUMERAL,\n\tPOFS_PARTICLE: POFS_PARTICLE,\n\tPOFS_PREFIX: POFS_PREFIX,\n\tPOFS_PREPOSITION: POFS_PREPOSITION,\n\tPOFS_PRONOUN: POFS_PRONOUN,\n\tPOFS_SUFFIX: POFS_SUFFIX,\n\tPOFS_SUPINE: POFS_SUPINE,\n\tPOFS_VERB: POFS_VERB,\n\tPOFS_VERB_PARTICIPLE: POFS_VERB_PARTICIPLE,\n\tGEND_MASCULINE: GEND_MASCULINE,\n\tGEND_FEMININE: GEND_FEMININE,\n\tGEND_NEUTER: GEND_NEUTER,\n\tGEND_COMMON: GEND_COMMON,\n\tGEND_ANIMATE: GEND_ANIMATE,\n\tGEND_INANIMATE: GEND_INANIMATE,\n\tGEND_PERSONAL_MASCULINE: GEND_PERSONAL_MASCULINE,\n\tGEND_ANIMATE_MASCULINE: GEND_ANIMATE_MASCULINE,\n\tGEND_INANIMATE_MASCULINE: GEND_INANIMATE_MASCULINE,\n\tCOMP_POSITIVE: COMP_POSITIVE,\n\tCOMP_COMPARITIVE: COMP_COMPARITIVE,\n\tCOMP_SUPERLATIVE: COMP_SUPERLATIVE,\n\tCASE_ABESSIVE: CASE_ABESSIVE,\n\tCASE_ABLATIVE: CASE_ABLATIVE,\n\tCASE_ABSOLUTIVE: CASE_ABSOLUTIVE,\n\tCASE_ACCUSATIVE: CASE_ACCUSATIVE,\n\tCASE_ADDIRECTIVE: CASE_ADDIRECTIVE,\n\tCASE_ADELATIVE: CASE_ADELATIVE,\n\tCASE_ADESSIVE: CASE_ADESSIVE,\n\tCASE_ADVERBIAL: CASE_ADVERBIAL,\n\tCASE_ALLATIVE: CASE_ALLATIVE,\n\tCASE_ANTESSIVE: CASE_ANTESSIVE,\n\tCASE_APUDESSIVE: CASE_APUDESSIVE,\n\tCASE_AVERSIVE: CASE_AVERSIVE,\n\tCASE_BENEFACTIVE: CASE_BENEFACTIVE,\n\tCASE_CARITIVE: CASE_CARITIVE,\n\tCASE_CAUSAL: CASE_CAUSAL,\n\tCASE_CAUSAL_FINAL: CASE_CAUSAL_FINAL,\n\tCASE_COMITATIVE: CASE_COMITATIVE,\n\tCASE_DATIVE: CASE_DATIVE,\n\tCASE_DELATIVE: CASE_DELATIVE,\n\tCASE_DIRECT: CASE_DIRECT,\n\tCASE_DISTRIBUTIVE: CASE_DISTRIBUTIVE,\n\tCASE_DISTRIBUTIVE_TEMPORAL: CASE_DISTRIBUTIVE_TEMPORAL,\n\tCASE_ELATIVE: CASE_ELATIVE,\n\tCASE_ERGATIVE: CASE_ERGATIVE,\n\tCASE_ESSIVE: CASE_ESSIVE,\n\tCASE_ESSIVE_FORMAL: CASE_ESSIVE_FORMAL,\n\tCASE_ESSIVE_MODAL: CASE_ESSIVE_MODAL,\n\tCASE_EQUATIVE: CASE_EQUATIVE,\n\tCASE_EVITATIVE: CASE_EVITATIVE,\n\tCASE_EXESSIVE: CASE_EXESSIVE,\n\tCASE_FINAL: CASE_FINAL,\n\tCASE_FORMAL: CASE_FORMAL,\n\tCASE_GENITIVE: CASE_GENITIVE,\n\tCASE_ILLATIVE: CASE_ILLATIVE,\n\tCASE_INELATIVE: CASE_INELATIVE,\n\tCASE_INESSIVE: CASE_INESSIVE,\n\tCASE_INSTRUCTIVE: CASE_INSTRUCTIVE,\n\tCASE_INSTRUMENTAL: CASE_INSTRUMENTAL,\n\tCASE_INSTRUMENTAL_COMITATIVE: CASE_INSTRUMENTAL_COMITATIVE,\n\tCASE_INTRANSITIVE: CASE_INTRANSITIVE,\n\tCASE_LATIVE: CASE_LATIVE,\n\tCASE_LOCATIVE: CASE_LOCATIVE,\n\tCASE_MODAL: CASE_MODAL,\n\tCASE_MULTIPLICATIVE: CASE_MULTIPLICATIVE,\n\tCASE_NOMINATIVE: CASE_NOMINATIVE,\n\tCASE_PARTITIVE: CASE_PARTITIVE,\n\tCASE_PEGATIVE: CASE_PEGATIVE,\n\tCASE_PERLATIVE: CASE_PERLATIVE,\n\tCASE_POSSESSIVE: CASE_POSSESSIVE,\n\tCASE_POSTELATIVE: CASE_POSTELATIVE,\n\tCASE_POSTDIRECTIVE: CASE_POSTDIRECTIVE,\n\tCASE_POSTESSIVE: CASE_POSTESSIVE,\n\tCASE_POSTPOSITIONAL: CASE_POSTPOSITIONAL,\n\tCASE_PREPOSITIONAL: CASE_PREPOSITIONAL,\n\tCASE_PRIVATIVE: CASE_PRIVATIVE,\n\tCASE_PROLATIVE: CASE_PROLATIVE,\n\tCASE_PROSECUTIVE: CASE_PROSECUTIVE,\n\tCASE_PROXIMATIVE: CASE_PROXIMATIVE,\n\tCASE_SEPARATIVE: CASE_SEPARATIVE,\n\tCASE_SOCIATIVE: CASE_SOCIATIVE,\n\tCASE_SUBDIRECTIVE: CASE_SUBDIRECTIVE,\n\tCASE_SUBESSIVE: CASE_SUBESSIVE,\n\tCASE_SUBELATIVE: CASE_SUBELATIVE,\n\tCASE_SUBLATIVE: CASE_SUBLATIVE,\n\tCASE_SUPERDIRECTIVE: CASE_SUPERDIRECTIVE,\n\tCASE_SUPERESSIVE: CASE_SUPERESSIVE,\n\tCASE_SUPERLATIVE: CASE_SUPERLATIVE,\n\tCASE_SUPPRESSIVE: CASE_SUPPRESSIVE,\n\tCASE_TEMPORAL: CASE_TEMPORAL,\n\tCASE_TERMINATIVE: CASE_TERMINATIVE,\n\tCASE_TRANSLATIVE: CASE_TRANSLATIVE,\n\tCASE_VIALIS: CASE_VIALIS,\n\tCASE_VOCATIVE: CASE_VOCATIVE,\n\tMOOD_ADMIRATIVE: MOOD_ADMIRATIVE,\n\tMOOD_COHORTATIVE: MOOD_COHORTATIVE,\n\tMOOD_CONDITIONAL: MOOD_CONDITIONAL,\n\tMOOD_DECLARATIVE: MOOD_DECLARATIVE,\n\tMOOD_DUBITATIVE: MOOD_DUBITATIVE,\n\tMOOD_ENERGETIC: MOOD_ENERGETIC,\n\tMOOD_EVENTIVE: MOOD_EVENTIVE,\n\tMOOD_GENERIC: MOOD_GENERIC,\n\tMOOD_GERUNDIVE: MOOD_GERUNDIVE,\n\tMOOD_HYPOTHETICAL: MOOD_HYPOTHETICAL,\n\tMOOD_IMPERATIVE: MOOD_IMPERATIVE,\n\tMOOD_INDICATIVE: MOOD_INDICATIVE,\n\tMOOD_INFERENTIAL: MOOD_INFERENTIAL,\n\tMOOD_INFINITIVE: MOOD_INFINITIVE,\n\tMOOD_INTERROGATIVE: MOOD_INTERROGATIVE,\n\tMOOD_JUSSIVE: MOOD_JUSSIVE,\n\tMOOD_NEGATIVE: MOOD_NEGATIVE,\n\tMOOD_OPTATIVE: MOOD_OPTATIVE,\n\tMOOD_PARTICIPLE: MOOD_PARTICIPLE,\n\tMOOD_PRESUMPTIVE: MOOD_PRESUMPTIVE,\n\tMOOD_RENARRATIVE: MOOD_RENARRATIVE,\n\tMOOD_SUBJUNCTIVE: MOOD_SUBJUNCTIVE,\n\tMOOD_SUPINE: MOOD_SUPINE,\n\tNUM_SINGULAR: NUM_SINGULAR,\n\tNUM_PLURAL: NUM_PLURAL,\n\tNUM_DUAL: NUM_DUAL,\n\tNUM_TRIAL: NUM_TRIAL,\n\tNUM_PAUCAL: NUM_PAUCAL,\n\tNUM_SINGULATIVE: NUM_SINGULATIVE,\n\tNUM_COLLECTIVE: NUM_COLLECTIVE,\n\tNUM_DISTRIBUTIVE_PLURAL: NUM_DISTRIBUTIVE_PLURAL,\n\tNRL_CARDINAL: NRL_CARDINAL,\n\tNRL_ORDINAL: NRL_ORDINAL,\n\tNRL_DISTRIBUTIVE: NRL_DISTRIBUTIVE,\n\tNURL_NUMERAL_ADVERB: NURL_NUMERAL_ADVERB,\n\tORD_1ST: ORD_1ST,\n\tORD_2ND: ORD_2ND,\n\tORD_3RD: ORD_3RD,\n\tORD_4TH: ORD_4TH,\n\tORD_5TH: ORD_5TH,\n\tORD_6TH: ORD_6TH,\n\tORD_7TH: ORD_7TH,\n\tORD_8TH: ORD_8TH,\n\tORD_9TH: ORD_9TH,\n\tTENSE_AORIST: TENSE_AORIST,\n\tTENSE_FUTURE: TENSE_FUTURE,\n\tTENSE_FUTURE_PERFECT: TENSE_FUTURE_PERFECT,\n\tTENSE_IMPERFECT: TENSE_IMPERFECT,\n\tTENSE_PAST_ABSOLUTE: TENSE_PAST_ABSOLUTE,\n\tTENSE_PERFECT: TENSE_PERFECT,\n\tTENSE_PLUPERFECT: TENSE_PLUPERFECT,\n\tTENSE_PRESENT: TENSE_PRESENT,\n\tVKIND_TO_BE: VKIND_TO_BE,\n\tVKIND_COMPOUNDS_OF_TO_BE: VKIND_COMPOUNDS_OF_TO_BE,\n\tVKIND_TAKING_ABLATIVE: VKIND_TAKING_ABLATIVE,\n\tVKIND_TAKING_DATIVE: VKIND_TAKING_DATIVE,\n\tVKIND_TAKING_GENITIVE: VKIND_TAKING_GENITIVE,\n\tVKIND_TRANSITIVE: VKIND_TRANSITIVE,\n\tVKIND_INTRANSITIVE: VKIND_INTRANSITIVE,\n\tVKIND_IMPERSONAL: VKIND_IMPERSONAL,\n\tVKIND_DEPONENT: VKIND_DEPONENT,\n\tVKIND_SEMIDEPONENT: VKIND_SEMIDEPONENT,\n\tVKIND_PERFECT_DEFINITE: VKIND_PERFECT_DEFINITE,\n\tVOICE_ACTIVE: VOICE_ACTIVE,\n\tVOICE_PASSIVE: VOICE_PASSIVE,\n\tVOICE_MEDIOPASSIVE: VOICE_MEDIOPASSIVE,\n\tVOICE_IMPERSONAL_PASSIVE: VOICE_IMPERSONAL_PASSIVE,\n\tVOICE_MIDDLE: VOICE_MIDDLE,\n\tVOICE_ANTIPASSIVE: VOICE_ANTIPASSIVE,\n\tVOICE_REFLEXIVE: VOICE_REFLEXIVE,\n\tVOICE_RECIPROCAL: VOICE_RECIPROCAL,\n\tVOICE_CAUSATIVE: VOICE_CAUSATIVE,\n\tVOICE_ADJUTATIVE: VOICE_ADJUTATIVE,\n\tVOICE_APPLICATIVE: VOICE_APPLICATIVE,\n\tVOICE_CIRCUMSTANTIAL: VOICE_CIRCUMSTANTIAL,\n\tVOICE_DEPONENT: VOICE_DEPONENT,\n\tTYPE_IRREGULAR: TYPE_IRREGULAR,\n\tTYPE_REGULAR: TYPE_REGULAR\n});\n\nclass Definition {\n  constructor (text, language, format) {\n    this.text = text;\n    this.language = language;\n    this.format = format;\n  }\n}\n\n/**\n * Wrapper class for a (grammatical, usually) feature, such as part of speech or declension. Keeps both value and type information.\n */\nclass Feature {\n    /**\n     * Initializes a Feature object\n     * @param {string | string[]} value - A single feature value or, if this feature could have multiple\n     * values, an array of values.\n     * @param {string} type - A type of the feature, allowed values are specified in 'types' object.\n     * @param {string} language - A language of a feature, allowed values are specified in 'languages' object.\n     */\n  constructor (value, type, language) {\n    if (!Feature.types.isAllowed(type)) {\n      throw new Error('Features of \"' + type + '\" type are not supported.')\n    }\n    if (!value) {\n      throw new Error('Feature should have a non-empty value.')\n    }\n    if (!type) {\n      throw new Error('Feature should have a non-empty type.')\n    }\n    if (!language) {\n      throw new Error('Feature constructor requires a language')\n    }\n    this.value = value;\n    this.type = type;\n    this.language = language;\n  };\n\n  isEqual (feature) {\n    if (Array.isArray(feature.value)) {\n      if (!Array.isArray(this.value) || this.value.length !== feature.value.length) {\n        return false\n      }\n      let equal = this.type === feature.type && this.language === feature.language;\n      equal = equal && this.value.every(function (element, index) {\n        return element === feature.value[index]\n      });\n      return equal\n    } else {\n      return this.value === feature.value && this.type === feature.type && this.language === feature.language\n    }\n  }\n}\n// Should have no spaces in values in order to be used in HTML templates\nFeature.types = {\n  word: 'word',\n  part: 'part of speech', // Part of speech\n  number: 'number',\n  grmCase: 'case',\n  declension: 'declension',\n  gender: 'gender',\n  type: 'type',\n  conjugation: 'conjugation',\n  comparison: 'comparison',\n  tense: 'tense',\n  voice: 'voice',\n  mood: 'mood',\n  person: 'person',\n  frequency: 'frequency', // How frequent this word is\n  meaning: 'meaning', // Meaning of a word\n  source: 'source', // Source of word definition\n  footnote: 'footnote', // A footnote for a word's ending\n  dialect: 'dialect', // a dialect iderntifier\n  note: 'note', // a general note\n  pronunciation: 'pronunciation',\n  area: 'area',\n  geo: 'geo', // geographical data\n  kind: 'kind', // verb kind informatin\n  derivtype: 'derivtype',\n  stemtype: 'stemtype',\n  morph: 'morph', // general morphological information\n  var: 'var', // variance?\n  isAllowed (value) {\n    let v = `${value}`;\n    return Object.values(this).includes(v)\n  }\n};\n\nclass FeatureImporter {\n  constructor (defaults = []) {\n    this.hash = {};\n    for (let value of defaults) {\n      this.map(value, value);\n    }\n    return this\n  }\n\n    /**\n     * Sets mapping between external imported value and one or more library standard values. If an importedValue\n     * is already in a hash table, old libraryValue will be overwritten with the new one.\n     * @param {string} importedValue - External value\n     * @param {Object | Object[] | string | string[]} libraryValue - Library standard value\n     */\n  map (importedValue, libraryValue) {\n    if (!importedValue) {\n      throw new Error('Imported value should not be empty.')\n    }\n\n    if (!libraryValue) {\n      throw new Error('Library value should not be empty.')\n    }\n\n    this.hash[importedValue] = libraryValue;\n    return this\n  }\n\n    /**\n     * Checks if value is in a map.\n     * @param {string} importedValue - A value to test.\n     * @returns {boolean} - Tru if value is in a map, false otherwise.\n     */\n  has (importedValue) {\n    return this.hash.hasOwnProperty(importedValue)\n  }\n\n    /**\n     * Returns one or more library standard values that match an external value\n     * @param {string} importedValue - External value\n     * @returns {Object | string} One or more of library standard values\n     */\n  get (importedValue) {\n    if (this.has(importedValue)) {\n      return this.hash[importedValue]\n    } else {\n      throw new Error('A value \"' + importedValue + '\" is not found in the importer.')\n    }\n  }\n}\n\n/**\n * Definition class for a (grammatical) feature. Stores type information and (optionally) all possible values of the feature.\n * It serves as a feature generator. If list of possible values is provided, it can generate a Feature object\n * each time a property that corresponds to a feature value is accessed. If no list of possible values provided,\n * a Feature object can be generated with get(value) method.\n *\n * An order of values determines a default sort and grouping order. If two values should have the same order,\n * they should be grouped within an array: value1, [value2, value3], value4. Here 'value2' and 'value3' have\n * the same priority for sorting and grouping.\n */\nclass FeatureType {\n    // TODO: value checking\n    /**\n     * Creates and initializes a Feature Type object.\n     * @param {string} type - A type of the feature, allowed values are specified in 'types' object.\n     * @param {string[] | string[][]} values - A list of allowed values for this feature type.\n     * If an empty array is provided, there will be no\n     * allowed values as well as no ordering (can be used for items that do not need or have a simple order,\n     * such as footnotes).\n     * @param {string} language - A language of a feature, allowed values are specified in 'languages' object.\n     */\n  constructor (type, values, language) {\n    if (!Feature.types.isAllowed(type)) {\n      throw new Error('Features of \"' + type + '\" type are not supported.')\n    }\n    if (!values || !Array.isArray(values)) {\n      throw new Error('Values should be an array (or an empty array) of values.')\n    }\n    if (!language) {\n      throw new Error('FeatureType constructor requires a language')\n    }\n\n    this.type = type;\n    this.language = language;\n\n        /*\n         This is a sort order index for a grammatical feature values. It is determined by the order of values in\n         a 'values' array.\n         */\n    this._orderIndex = [];\n    this._orderLookup = {};\n\n    for (const [index, value] of values.entries()) {\n      this._orderIndex.push(value);\n      if (Array.isArray(value)) {\n        for (let element of value) {\n          this[element] = new Feature(element, this.type, this.language);\n          this._orderLookup[element] = index;\n        }\n      } else {\n        this[value] = new Feature(value, this.type, this.language);\n        this._orderLookup[value] = index;\n      }\n    }\n  };\n\n    /**\n     * Return a Feature with an arbitrary value. This value would not be necessarily present among FeatureType values.\n     * This can be especially useful for features that do not set: a list of predefined values, such as footnotes.\n     * @param value\n     * @returns {Feature}\n     */\n  get (value) {\n    if (value) {\n      return new Feature(value, this.type, this.language)\n    } else {\n      throw new Error('A non-empty value should be provided.')\n    }\n  }\n\n  getFromImporter (importerName, value) {\n    let mapped;\n    try {\n      mapped = this.importer[importerName].get(value);\n    } catch (e) {\n      // quietly catch not found and replace with default\n      mapped = this.get(value);\n    }\n    return mapped\n  }\n\n    /**\n     * Creates and returns a new importer with a specific name. If an importer with this name already exists,\n     * an existing Importer object will be returned.\n     * @param {string} name - A name of an importer object\n     * @returns {Importer} A new or existing Importer object that matches a name provided\n     */\n  addImporter (name) {\n    if (!name) {\n      throw new Error('Importer should have a non-empty name.')\n    }\n    this.importer = this.importer || {};\n    this.importer[name] = this.importer[name] || new FeatureImporter();\n    return this.importer[name]\n  }\n\n    /**\n     * Return copies of all feature values as Feature objects in a sorted array, according to feature type's sort order.\n     * For a similar function that returns strings instead of Feature objects see orderedValues().\n     * @returns {Feature[] | Feature[][]} Array of feature values sorted according to orderIndex.\n     * If particular feature contains multiple feature values (i.e. `masculine` and `feminine` values combined),\n     * an array of Feature objects will be returned instead of a single Feature object, as for single feature values.\n     */\n  get orderedFeatures () {\n    return this.orderedValues.map((value) => new Feature(value, this.type, this.language))\n  }\n\n    /**\n     * Return all feature values as strings in a sorted array, according to feature type's sort order.\n     * This is a main method that specifies a sort order of the feature type. orderedFeatures() relies\n     * on this method in providing a sorted array of feature values. If you want to create\n     * a custom sort order for a particular feature type that will depend on some options that are not type-related,\n     * create a wrapper around this function providing it with options arguments so it will be able to decide\n     * in what order those features will be based on those arguments.\n     * For a similar function that returns Feature objects instead of strings see orderedValues().\n     * @returns {string[]} Array of feature values sorted according to orderIndex.\n     * If particular feature contains multiple feature values (i.e. `masculine` and `feminine` values combined),\n     * an array of strings will be returned instead of a single strings, as for single feature values.\n     */\n  get orderedValues () {\n    return this._orderIndex\n  }\n\n    /**\n     * Returns a lookup table for type values as:\n     *  {value1: order1, value2: order2}, where order is a sort order of an item. If two items have the same sort order,\n     *  their order value will be the same.\n     * @returns {object}\n     */\n  get orderLookup () {\n    return this._orderLookup\n  }\n\n    /**\n     * Sets an order of grammatical feature values for a grammatical feature. Used mostly for sorting, filtering,\n     * and displaying.\n     *\n     * @param {Feature[] | Feature[][]} values - a list of grammatical features that specify their order for\n     * sorting and filtering. Some features can be grouped as [[genders.masculine, genders.feminine], LibLatin.genders.neuter].\n     * It means that genders.masculine and genders.feminine belong to the same group. They will have the same index\n     * and will be stored inside an _orderIndex as an array. genders.masculine and genders.feminine will be grouped together\n     * during filtering and will be in the same bin during sorting.\n     *\n     */\n  set order (values) {\n    if (!values || (Array.isArray(values) && values.length === 0)) {\n      throw new Error('A non-empty list of values should be provided.')\n    }\n\n        // If a single value is provided, convert it into an array\n    if (!Array.isArray(values)) {\n      values = [values];\n    }\n\n    for (let value of values) {\n      if (Array.isArray(value)) {\n        for (let element of value) {\n          if (!this.hasOwnProperty(element.value)) {\n            throw new Error('Trying to order an element with \"' + element.value + '\" value that is not stored in a \"' + this.type + '\" type.')\n          }\n\n          if (element.type !== this.type) {\n            throw new Error('Trying to order an element with type \"' + element.type + '\" that is different from \"' + this.type + '\".')\n          }\n\n          if (element.language !== this.language) {\n            throw new Error('Trying to order an element with language \"' + element.language + '\" that is different from \"' + this.language + '\".')\n          }\n        }\n      } else {\n        if (!this.hasOwnProperty(value.value)) {\n          throw new Error('Trying to order an element with \"' + value.value + '\" value that is not stored in a \"' + this.type + '\" type.')\n        }\n\n        if (value.type !== this.type) {\n          throw new Error('Trying to order an element with type \"' + value.type + '\" that is different from \"' + this.type + '\".')\n        }\n\n        if (value.language !== this.language) {\n          throw new Error('Trying to order an element with language \"' + value.language + '\" that is different from \"' + this.language + '\".')\n        }\n      }\n    }\n\n        // Erase whatever sort order was set previously\n    this._orderLookup = {};\n    this._orderIndex = [];\n\n        // Define a new sort order\n    for (const [index, element] of values.entries()) {\n      if (Array.isArray(element)) {\n                // If it is an array, all values should have the same order\n        let elements = [];\n        for (const subElement of element) {\n          this._orderLookup[subElement.value] = index;\n          elements.push(subElement.value);\n        }\n        this._orderIndex[index] = elements;\n      } else {\n                // If is a single value\n        this._orderLookup[element.value] = index;\n        this._orderIndex[index] = element.value;\n      }\n    }\n  }\n}\n\n/**\n * A list of grammatical features that characterizes a language unit. Has some additional service methods,\n * compared with standard storage objects.\n */\nclass FeatureList {\n    /**\n     * Initializes a feature list.\n     * @param {FeatureType[]} features - Features that build the list (optional, can be set later).\n     */\n  constructor (features = []) {\n    this._features = [];\n    this._types = {};\n    this.add(features);\n  }\n\n  add (features) {\n    if (!features || !Array.isArray(features)) {\n      throw new Error('Features must be defined and must come in an array.')\n    }\n\n    for (let feature of features) {\n      this._features.push(feature);\n      this._types[feature.type] = feature;\n    }\n  }\n\n    /**\n     * Returns an array of grouping features.\n     * @returns {FeatureType[]} - An array of grouping features.\n     */\n  get items () {\n    return this._features\n  }\n\n  forEach (callback) {\n    this._features.forEach(callback);\n  }\n\n    /**\n     * Returns a feature of a particular type. If such feature does not exist in a list, returns undefined.\n     * @param {string} type - Feature type as defined in `types` object.\n     * @return {FeatureType | undefined} A feature if a particular type if contains it. Undefined otherwise.\n     */\n  ofType (type) {\n    if (this.hasType(type)) {\n      return this._types[type]\n    }\n  }\n\n    /**\n     * Checks whether a feature list has a feature of a specific type.\n     * @param {string} type - Feature type as defined in `types` object.\n     * @return {boolean} Whether a feature list has a feature of a particular type.\n     */\n  hasType (type) {\n    return this._types.hasOwnProperty(type)\n  }\n}\n\n/**\n * @class  LanguageModel is the base class for language-specific behavior\n */\nclass LanguageModel {\n   /**\n   */\n  constructor () {\n    this.sourceLanguage = null;\n    this.contextForward = 0;\n    this.context_backward = 0;\n    this.direction = LANG_DIR_LTR;\n    this.baseUnit = LANG_UNIT_WORD;\n    this.codes = [];\n  }\n\n  _initializeFeatures () {\n    let features = {};\n    let code = this.toCode();\n    features[Feature.types.part] = new FeatureType(Feature.types.part,\n      [ POFS_ADVERB,\n        POFS_ADVERBIAL,\n        POFS_ADJECTIVE,\n        POFS_ARTICLE,\n        POFS_CONJUNCTION,\n        POFS_EXCLAMATION,\n        POFS_INTERJECTION,\n        POFS_NOUN,\n        POFS_NUMERAL,\n        POFS_PARTICLE,\n        POFS_PREFIX,\n        POFS_PREPOSITION,\n        POFS_PRONOUN,\n        POFS_SUFFIX,\n        POFS_SUPINE,\n        POFS_VERB,\n        POFS_VERB_PARTICIPLE ], code);\n    features[Feature.types.gender] = new FeatureType(Feature.types.gender,\n      [ GEND_MASCULINE, GEND_FEMININE, GEND_NEUTER ], code);\n    features[Feature.types.type] = new FeatureType(Feature.types.type,\n      [TYPE_REGULAR, TYPE_IRREGULAR], code);\n    features[Feature.types.person] = new FeatureType(Feature.types.person,\n      [ORD_1ST, ORD_2ND, ORD_3RD], code);\n    return features\n  }\n\n  /**\n   * Handler which can be used as the contextHander.\n   * It uses language-specific configuration to identify\n   * the elements from the alph-text popup which should produce links\n   * to the language-specific grammar.\n   * @see #contextHandler\n   */\n  grammarContext (doc) {\n      // used to bind a click handler on the .alph-entry items in the\n      // popup which retrieved the context attribute from the clicked\n      // term and used that to construct a link and open the grammar\n      // at the apporopriate place.\n      // var links = this.getGrammarLinks();\n\n      // for (var link_name in links)\n      // {\n      //   if (links.hasOwnProperty(link_name))\n      //    {\n              // Alph.$(\".alph-entry .\" + link_name,a_doc).bind('click',link_name,\n              //   function(a_e)\n              //    {\n                        // build target inside grammar\n                        // var target = a_e.data;\n                        // var rngContext = Alph.$(this).attr(\"context\");\n                        // if (rngContext != null)\n                        // {\n                        //  target += \"-\" + rngContext.split(/-/)[0];\n                        // }\n                        // myobj.openGrammar(a_e.originaEvent,this,target);\n               //   }\n              // );\n       //   }\n      // }\n  }\n\n  /**\n   * Check to see if this language tool can produce an inflection table display\n   * for the current node\n   */\n  canInflect (node) {\n    return false\n  }\n\n  /**\n   * Check to see if the supplied language code is supported by this tool\n   * @param {string} code the language code\n   * @returns true if supported false if not\n   * @type Boolean\n   */\n  static supportsLanguage (code) {\n    return this.codes.includes[code]\n  }\n\n  /**\n   * Return a normalized version of a word which can be used to compare the word for equality\n   * @param {string} word the source word\n   * @returns the normalized form of the word (default version just returns the same word,\n   *          override in language-specific subclass)\n   * @type String\n   */\n  normalizeWord (word) {\n    return word\n  }\n\n  /**\n   * Get a list of valid puncutation for this language\n   * @returns {String} a string containing valid puncutation symbols\n   */\n  getPunctuation () {\n    return \".,;:!?'\\\"(){}\\\\[\\\\]<>/\\\\\\u00A0\\u2010\\u2011\\u2012\\u2013\\u2014\\u2015\\u2018\\u2019\\u201C\\u201D\\u0387\\u00B7\\n\\r\"\n  }\n\n  toString () {\n    return String(this.sourceLanguage)\n  }\n\n  isEqual (model) {\n    return this.sourceLanguage === model.sourceLanguage\n  }\n\n  toCode () {\n    return null\n  }\n}\n\n/**\n * @class  LatinLanguageModel is the lass for Latin specific behavior\n */\nclass LatinLanguageModel extends LanguageModel {\n   /**\n   */\n  constructor () {\n    super();\n    this.sourceLanguage = LANG_LATIN;\n    this.contextForward = 0;\n    this.contextBackward = 0;\n    this.direction = LANG_DIR_LTR;\n    this.baseUnit = LANG_UNIT_WORD;\n    this.codes = [STR_LANG_CODE_LA, STR_LANG_CODE_LAT];\n    this.features = this._initializeFeatures();\n  }\n\n  _initializeFeatures () {\n    let features = super._initializeFeatures();\n    let code = this.toCode();\n    features[Feature.types.number] = new FeatureType(Feature.types.number, [NUM_SINGULAR, NUM_PLURAL], code);\n    features[Feature.types.grmCase] = new FeatureType(Feature.types.grmCase,\n      [ CASE_NOMINATIVE,\n        CASE_GENITIVE,\n        CASE_DATIVE,\n        CASE_ACCUSATIVE,\n        CASE_ABLATIVE,\n        CASE_LOCATIVE,\n        CASE_VOCATIVE\n      ], code);\n    features[Feature.types.declension] = new FeatureType(Feature.types.declension,\n      [ ORD_1ST, ORD_2ND, ORD_3RD, ORD_4TH, ORD_5TH ], code);\n    features[Feature.types.tense] = new FeatureType(Feature.types.tense,\n      [ TENSE_PRESENT,\n        TENSE_IMPERFECT,\n        TENSE_FUTURE,\n        TENSE_PERFECT,\n        TENSE_PLUPERFECT,\n        TENSE_FUTURE_PERFECT\n      ], code);\n    features[Feature.types.voice] = new FeatureType(Feature.types.voice, [VOICE_PASSIVE, VOICE_ACTIVE], code);\n    features[Feature.types.mood] = new FeatureType(Feature.types.mood, [MOOD_INDICATIVE, MOOD_SUBJUNCTIVE], code);\n    features[Feature.types.conjugation] = new FeatureType(Feature.types.conjugation,\n      [ ORD_1ST,\n        ORD_2ND,\n        ORD_3RD,\n        ORD_4TH\n      ], code);\n    return features\n  }\n\n  /**\n   * Check to see if this language tool can produce an inflection table display\n   * for the current node\n   */\n  canInflect (node) {\n    return true\n  }\n\n  /**\n   * Return a normalized version of a word which can be used to compare the word for equality\n   * @param {String} word the source word\n   * @returns the normalized form of the word (default version just returns the same word,\n   *          override in language-specific subclass)\n   * @type String\n   */\n  normalizeWord (word) {\n    return word\n  }\n\n  /**\n   * Get a list of valid puncutation for this language\n   * @returns {String} a string containing valid puncutation symbols\n   */\n  getPunctuation () {\n    return \".,;:!?'\\\"(){}\\\\[\\\\]<>/\\\\\\u00A0\\u2010\\u2011\\u2012\\u2013\\u2014\\u2015\\u2018\\u2019\\u201C\\u201D\\u0387\\u00B7\\n\\r\"\n  }\n\n  toCode () {\n    return STR_LANG_CODE_LAT\n  }\n}\n\n/**\n * @class  LatinLanguageModel is the lass for Latin specific behavior\n */\nclass GreekLanguageModel extends LanguageModel {\n   /**\n   * @constructor\n   */\n  constructor () {\n    super();\n    this.sourceLanguage = LANG_GREEK;\n    this.contextForward = 0;\n    this.contextBackward = 0;\n    this.direction = LANG_DIR_LTR;\n    this.baseUnit = LANG_UNIT_WORD;\n    this.languageCodes = [STR_LANG_CODE_GRC];\n    this.features = this._initializeFeatures();\n  }\n\n  _initializeFeatures () {\n    let features = super._initializeFeatures();\n    let code = this.toCode();\n    features[Feature.types.number] = new FeatureType(Feature.types.number, [NUM_SINGULAR, NUM_PLURAL, NUM_DUAL], code);\n    features[Feature.types.grmCase] = new FeatureType(Feature.types.grmCase,\n      [ CASE_NOMINATIVE,\n        CASE_GENITIVE,\n        CASE_DATIVE,\n        CASE_ACCUSATIVE,\n        CASE_VOCATIVE\n      ], code);\n    features[Feature.types.declension] = new FeatureType(Feature.types.declension,\n      [ ORD_1ST, ORD_2ND, ORD_3RD ], code);\n    features[Feature.types.tense] = new FeatureType(Feature.types.tense,\n      [ TENSE_PRESENT,\n        TENSE_IMPERFECT,\n        TENSE_FUTURE,\n        TENSE_PERFECT,\n        TENSE_PLUPERFECT,\n        TENSE_FUTURE_PERFECT,\n        TENSE_AORIST\n      ], code);\n    features[Feature.types.voice] = new FeatureType(Feature.types.voice,\n      [ VOICE_PASSIVE,\n        VOICE_ACTIVE,\n        VOICE_MEDIOPASSIVE,\n        VOICE_MIDDLE\n      ], code);\n    features[Feature.types.mood] = new FeatureType(Feature.types.mood,\n      [ MOOD_INDICATIVE,\n        MOOD_SUBJUNCTIVE,\n        MOOD_OPTATIVE,\n        MOOD_IMPERATIVE\n      ], code);\n    // TODO full list of greek dialects\n    features[Feature.types.dialect] = new FeatureType(Feature.types.dialect, ['attic', 'epic', 'doric'], code);\n    return features\n  }\n\n  toCode () {\n    return STR_LANG_CODE_GRC\n  }\n\n  /**\n   * Check to see if this language tool can produce an inflection table display\n   * for the current node\n   */\n  canInflect (node) {\n    return true\n  }\n\n  /**\n   * Return a normalized version of a word which can be used to compare the word for equality\n   * @param {String} word the source word\n   * @returns the normalized form of the word (default version just returns the same word,\n   *          override in language-specific subclass)\n   * @type String\n   */\n  normalizeWord (word) {\n    return word\n  }\n\n  /**\n   * Get a list of valid puncutation for this language\n   * @returns {String} a string containing valid puncutation symbols\n   */\n  getPunctuation () {\n    return \".,;:!?'\\\"(){}\\\\[\\\\]<>/\\\\\\u00A0\\u2010\\u2011\\u2012\\u2013\\u2014\\u2015\\u2018\\u2019\\u201C\\u201D\\u0387\\u00B7\\n\\r\"\n  }\n}\n\n/**\n * @class  LatinLanguageModel is the lass for Latin specific behavior\n */\nclass ArabicLanguageModel extends LanguageModel {\n   /**\n   * @constructor\n   */\n  constructor () {\n    super();\n    this.sourceLanguage = LANG_ARABIC;\n    this.contextForward = 0;\n    this.contextBackward = 0;\n    this.direction = LANG_DIR_RTL;\n    this.baseUnit = LANG_UNIT_WORD;\n    this.languageCodes = [STR_LANG_CODE_ARA, STR_LANG_CODE_AR];\n    this._initializeFeatures();\n  }\n\n  _initializeFeatures () {\n    this.features = super._initializeFeatures();\n  }\n\n  toCode () {\n    return STR_LANG_CODE_ARA\n  }\n\n  /**\n   * Check to see if this language tool can produce an inflection table display\n   * for the current node\n   */\n  canInflect (node) {\n    return false\n  }\n\n  /**\n   * Return a normalized version of a word which can be used to compare the word for equality\n   * @param {String} word the source word\n   * @returns the normalized form of the word (default version just returns the same word,\n   *          override in language-specific subclass)\n   * @type String\n   */\n  normalizeWord (word) {\n    // TODO\n    return word\n  }\n\n  /**\n   * Get a list of valid puncutation for this language\n   * @returns {String} a string containing valid puncutation symbols\n   */\n  getPunctuation () {\n    return \".,;:!?'\\\"(){}\\\\[\\\\]<>/\\\\\\u00A0\\u2010\\u2011\\u2012\\u2013\\u2014\\u2015\\u2018\\u2019\\u201C\\u201D\\u0387\\u00B7\\n\\r\"\n  }\n}\n\nconst MODELS = new Map([\n  [ STR_LANG_CODE_LA, LatinLanguageModel ],\n  [ STR_LANG_CODE_LAT, LatinLanguageModel ],\n  [ STR_LANG_CODE_GRC, GreekLanguageModel ],\n  [ STR_LANG_CODE_ARA, ArabicLanguageModel ],\n  [ STR_LANG_CODE_AR, ArabicLanguageModel ]\n]);\n\nclass LanguageModelFactory {\n  static supportsLanguage (code) {\n    return MODELS.has(code)\n  }\n\n  static getLanguageForCode (code = null) {\n    let Model = MODELS.get(code);\n    if (Model) {\n      return new Model()\n    }\n    // for now return a default Model\n    // TODO may want to throw an error\n    return new LanguageModel()\n  }\n}\n\n/**\n * Lemma, a canonical form of a word.\n */\nclass Lemma {\n    /**\n     * Initializes a Lemma object.\n     * @param {string} word - A word.\n     * @param {string} language - A language of a word.\n     * @param {Array[string]} principalParts - the principalParts of a lemma\n     */\n  constructor (word, language, principalParts = []) {\n    if (!word) {\n      throw new Error('Word should not be empty.')\n    }\n\n    if (!language) {\n      throw new Error('Language should not be empty.')\n    }\n\n        // if (!languages.isAllowed(language)) {\n        //    throw new Error('Language \"' + language + '\" is not supported.');\n        // }\n\n    this.word = word;\n    this.language = language;\n    this.principalParts = principalParts;\n  }\n\n  static readObject (jsonObject) {\n    return new Lemma(jsonObject.word, jsonObject.language)\n  }\n}\n\n/*\n Hierarchical structure of return value of a morphological analyzer:\n\n Homonym (a group of words that are written the same way, https://en.wikipedia.org/wiki/Homonym)\n    Lexeme 1 (a unit of lexical meaning, https://en.wikipedia.org/wiki/Lexeme)\n        Have a lemma and one or more inflections\n        Lemma (also called a headword, a canonical form of a group of words https://en.wikipedia.org/wiki/Lemma_(morphology) )\n        Inflection 1\n            Stem\n            Suffix (also called ending)\n        Inflection 2\n            Stem\n            Suffix\n    Lexeme 2\n        Lemma\n        Inflection 1\n            Stem\n            Suffix\n */\n\n/**\n * Represents an inflection of a word\n */\nclass Inflection {\n    /**\n     * Initializes an Inflection object.\n     * @param {string} stem - A stem of a word.\n     * @param {string} language - A word's language.\n     */\n  constructor (stem, language) {\n    if (!stem) {\n      throw new Error('Stem should not be empty.')\n    }\n\n    if (!language) {\n      throw new Error('Langauge should not be empty.')\n    }\n\n    if (!LanguageModelFactory.supportsLanguage(language)) {\n      throw new Error(`language ${language} not supported.`)\n    }\n\n    this.stem = stem;\n    this.language = language;\n\n    // Suffix may not be present in every word. If missing, it will set to null.\n    this.suffix = null;\n\n    // Prefix may not be present in every word. If missing, it will set to null.\n    this.prefix = null;\n\n    // Example may not be provided\n    this.example = null;\n  }\n\n  static readObject (jsonObject) {\n    let inflection = new Inflection(jsonObject.stem, jsonObject.language);\n    if (jsonObject.suffix) {\n      inflection.suffix = jsonObject.suffix;\n    }\n    if (jsonObject.prefix) {\n      inflection.prefix = jsonObject.prefix;\n    }\n    if (jsonObject.example) {\n      inflection.example = jsonObject.example;\n    }\n    return inflection\n  }\n\n    /**\n     * Sets a grammatical feature in an inflection. Some features can have multiple values, In this case\n     * an array of Feature objects will be provided.\n     * Values are taken from features and stored in a 'feature.type' property as an array of values.\n     * @param {Feature | Feature[]} data\n     */\n  set feature (data) {\n    if (!data) {\n      throw new Error('Inflection feature data cannot be empty.')\n    }\n    if (!Array.isArray(data)) {\n      data = [data];\n    }\n\n    let type = data[0].type;\n    this[type] = [];\n    for (let element of data) {\n      if (!(element instanceof Feature)) {\n        throw new Error('Inflection feature data must be a Feature object.')\n      }\n\n      if (element.language !== this.language) {\n        throw new Error('Language \"' + element.language + '\" of a feature does not match a language \"' +\n                this.language + '\" of an Inflection object.')\n      }\n\n      this[type].push(element.value);\n    }\n  }\n}\n\n/**\n * A basic unit of lexical meaning. Contains a primary Lemma object, one or more Inflection objects\n * and optional alternate Lemmas\n */\nclass Lexeme {\n    /**\n     * Initializes a Lexeme object.\n     * @param {Lemma} lemma - A lemma object.\n     * @param {Inflection[]} inflections - An array of inflections.\n     * @param {Definition} meaning - a short definition\n     */\n  constructor (lemma, inflections, meaning = null) {\n    if (!lemma) {\n      throw new Error('Lemma should not be empty.')\n    }\n\n    if (!(lemma instanceof Lemma)) {\n      throw new Error('Lemma should be of Lemma object type.')\n    }\n\n    if (!inflections) {\n      throw new Error('Inflections data should not be empty.')\n    }\n\n    if (!Array.isArray(inflections)) {\n      throw new Error('Inflection data should be provided in an array.')\n    }\n\n    for (let inflection of inflections) {\n      if (!(inflection instanceof Inflection)) {\n        throw new Error('All inflection data should be of Inflection object type.')\n      }\n    }\n\n    this.lemma = lemma;\n    this.inflections = inflections;\n    this.meaning = meaning;\n  }\n\n  static readObject (jsonObject) {\n    let lemma = Lemma.readObject(jsonObject.lemma);\n    let inflections = [];\n    for (let inflection of jsonObject.inflections) {\n      inflections.push(Inflection.readObject(inflection));\n    }\n    return new Lexeme(lemma, inflections)\n  }\n}\n\nclass Homonym {\n    /**\n     * Initializes a Homonym object.\n     * @param {Lexeme[]} lexemes - An array of Lexeme objects.\n     * @param {string} form - the form which produces the homonyms\n     */\n  constructor (lexemes, form) {\n    if (!lexemes) {\n      throw new Error('Lexemes data should not be empty.')\n    }\n\n    if (!Array.isArray(lexemes)) {\n      throw new Error('Lexeme data should be provided in an array.')\n    }\n\n    for (let lexeme of lexemes) {\n      if (!(lexeme instanceof Lexeme)) {\n        throw new Error('All lexeme data should be of Lexeme object type.')\n      }\n    }\n\n    this.lexemes = lexemes;\n    this.targetWord = form;\n  }\n\n  static readObject (jsonObject) {\n    let lexemes = [];\n    if (jsonObject.lexemes) {\n      for (let lexeme of jsonObject.lexemes) {\n        lexemes.push(Lexeme.readObject(lexeme));\n      }\n    }\n    let homonym = new Homonym(lexemes);\n    if (jsonObject.targetWord) {\n      homonym.targetWord = jsonObject.targetWord;\n    }\n    return homonym\n  }\n\n    /**\n     * Returns language of a homonym.\n     * Homonym does not have a language property, only lemmas and inflections do. We assume that all lemmas\n     * and inflections within the same homonym will have the same language, and we can determine a language\n     * by using language property of the first lemma. We chan change this logic in the future if we'll need to.\n     * @returns {string} A language code, as defined in the `languages` object.\n     */\n  get language () {\n    if (this.lexemes && this.lexemes[0] && this.lexemes[0].lemma && this.lexemes[0].lemma.language) {\n      return this.lexemes[0].lemma.language\n    } else {\n      throw new Error('Homonym has not been initialized properly. Unable to obtain language information.')\n    }\n  }\n}\n\n/**\n * An abstraction of an Alpheios resource provider\n */\nclass ResourceProvider {\n  /**\n   * @constructor\n   * @param {string} uri - a unique resource identifier for this provider\n   * @param {string} rights - rights text\n   * @param {Map} rightsTranslations - optional map of translated rights text - keys should be language of text, values the text\n   */\n  constructor (uri = '', rights = '', rightsTranslations = new Map([['default', rights]])) {\n    this.uri = uri;\n    this.rights = rightsTranslations;\n    if (!this.rights.has('default')) {\n      this.rights.set('default', rights);\n    }\n  }\n\n  /**\n   * @return a string representation of the resource provider, in the default language\n   */\n  toString () {\n    return this.rights.get('default')\n  }\n\n  /**\n   * Produce a string representation of the resource provider, in the requested locale if available\n   * @param {string} languageCode\n   * @return a string representation of the resource provider, in the requested locale if available\n   */\n  toLocaleString (languageCode) {\n    return this.rights.get(languageCode) || this.rights.get('default')\n  }\n\n  static getProxy (provider = null, target = {}) {\n    return new Proxy(target, {\n      get: function (target, name) {\n        return name === 'provider' ? provider : target[name]\n      }\n    })\n  }\n}\n\nexport { constants as Constants, Definition, Feature, FeatureType, FeatureList, FeatureImporter, Inflection, LanguageModelFactory, Homonym, Lexeme, Lemma, LatinLanguageModel, GreekLanguageModel, ArabicLanguageModel, ResourceProvider };\n//# sourceMappingURL=alpheios-data-models.js.map\n","/*\nObjects of a morphology analyzer's library\n */\nimport * as Models from 'alpheios-data-models'\n\n/**\n * Holds all information required to transform from morphological analyzer's grammatical feature values to the\n * library standards. There is one ImportData object per language.\n */\nclass ImportData {\n    /**\n     * Creates an InmportData object for the language provided.\n     * @param {Models.LanguageModel} language - A language of the import data.\n     */\n  constructor (language, engine) {\n    'use strict'\n    this.language = language\n    this.engine = engine\n    // add all the features that the language supports so that we\n    // can return the default values if we don't need to import a mapping\n    for (let featureName of Object.keys(language.features)) {\n      this.addFeature(featureName)\n    }\n    // may be overridden by specific engine use via setLemmaParser\n    this.parseLemma = function (lemma) { return new Models.Lemma(lemma, this.language.toCode()) }\n  }\n\n    /**\n     * Adds a grammatical feature whose values to be mapped.\n     * @param {string} featureName - A name of a grammatical feature (i.e. declension, number, etc.)\n     * @return {Object} An object that represent a newly created grammatical feature.\n     */\n  addFeature (featureName) {\n    this[featureName] = {}\n    let language = this.language\n\n    this[featureName].add = function add (providerValue, alpheiosValue) {\n      'use strict'\n      this[providerValue] = alpheiosValue\n      return this\n    }\n\n    this[featureName].get = function get (providerValue) {\n      'use strict'\n      if (!this.importer.has(providerValue)) {\n        // if the providerValue matches the model value return that\n        if (language.features[featureName][providerValue]) {\n          return language.features[featureName][providerValue]\n        } else {\n          throw new Error(\"Skipping an unknown value '\" +\n                    providerValue + \"' of a grammatical feature '\" + featureName + \"' of \" + language + ' language.')\n        }\n      } else {\n        return this.importer.get(providerValue)\n      }\n    }\n\n    this[featureName].importer = new Models.FeatureImporter()\n\n    return this[featureName]\n  }\n\n  /**\n   * Add an engine-specific lemma parser\n   */\n  setLemmaParser (callback) {\n    this.parseLemma = callback\n  }\n}\nexport default ImportData\n","import ImportData from '../lib'\nimport * as Models from 'alpheios-data-models'\n\nlet data = new ImportData(new Models.LatinLanguageModel(), 'whitakerLat')\nlet types = Models.Feature.types\n\n/*\nBelow are value conversion maps for each grammatical feature to be parsed.\nFormat:\ndata.addFeature(typeName).add(providerValueName, LibValueName);\n(functions are chainable)\nTypes and values that are unknown (undefined) will be skipped during parsing.\n */\n\n // TODO  - per inflections.xsd\n // Whitakers Words uses packon and tackon in POFS, not sure how\n\ndata.addFeature(Models.Feature.types.gender).importer\n    .map('common',\n  [ data.language.features[types.gender][Models.Constants.GEND_MASCULINE],\n    data.language.features[types.gender][Models.Constants.GEND_FEMININE]\n  ])\n    .map('all',\n  [ data.language.features[types.gender][Models.Constants.GEND_MASCULINE],\n    data.language.features[types.gender][Models.Constants.GEND_FEMININE],\n    data.language.features[types.gender][Models.Constants.GEND_NEUTER]\n  ])\n\ndata.addFeature(Models.Feature.types.tense).importer\n    .map('future_perfect', data.language.features[types.tense][Models.Constants.TENSE_FUTURE_PERFECT])\n\ndata.setLemmaParser(function (lemma) {\n  // Whitaker's Words returns principal parts for some words\n  // and sometimes has a space separted stem and suffix\n  let parsed, primary\n  let parts = []\n  let lemmas = lemma.split(', ')\n  for (let [index, l] of lemmas.entries()) {\n    let normalized = l.split(' ')[0]\n    if (index === 0) {\n      primary = normalized\n    }\n    parts.push(normalized)\n  }\n  if (primary) {\n    parsed = new Models.Lemma(primary, this.language.toCode(), parts)\n  }\n\n  return parsed\n})\n\nexport default data\n","import ImportData from '../lib'\nimport * as Models from 'alpheios-data-models'\n\nlet data = new ImportData(new Models.GreekLanguageModel(), 'morpheusgrc')\nlet types = Models.Feature.types\n\n/*\nBelow are value conversion maps for each grammatical feature to be parsed.\nFormat:\ndata.addFeature(typeName).add(providerValueName, LibValueName);\n(functions are chainable)\nTypes and values that are unknown (undefined) will be skipped during parsing.\n */\n\ndata.addFeature(Models.Feature.types.gender).importer\n    .map('masculine feminine',\n  [ data.language.features[types.gender][Models.Constants.GEND_MASCULINE],\n    data.language.features[types.gender][Models.Constants.GEND_FEMININE]\n  ])\n\ndata.addFeature(Models.Feature.types.declension).importer\n    .map('1st & 2nd',\n  [ data.language.features[types.declension][Models.Constants.ORD_1ST],\n    data.language.features[types.declension][Models.Constants.ORD_2ND]\n  ])\n\nexport default data\n","import ImportData from '../lib'\nimport * as Models from 'alpheios-data-models'\n\nlet data = new ImportData(new Models.ArabicLanguageModel(), 'aramorph')\nlet types = Models.Feature.types\n\ndata.addFeature(Models.Feature.types.part).importer\n    .map('proper noun', [data.language.features[types.part][Models.Constants.POFS_NOUN]])\n\nexport default data\n","import Cupidinibus from './latin_noun_cupidinibus.json'\nimport Mare from './latin_noun_adj_mare.json'\nimport Cepit from './latin_verb_cepit.json'\nimport Pilsopo from './greek_noun_pilsopo.json'\n\nclass WordTestData {\n  constructor () {\n    this._words = {\n      'cupidinibus': Cupidinibus,\n      'mare': Mare,\n      'cepit': Cepit,\n      'φιλόσοφος': Pilsopo\n    }\n  }\n\n  get (word) {\n    if (this._words.hasOwnProperty(word)) {\n      return this._words[word]\n    }\n    throw new Error(`Word \"${word}\" does not exist in test data`)\n  }\n}\nexport default WordTestData\n","import BaseAdapter from 'alpheios-morph-client'\nimport Whitakers from './lib/engine/whitakers'\nimport Morpheusgrc from './lib/engine/morpheusgrc'\nimport Aramorph from './lib/engine/aramorph'\nimport * as Models from 'alpheios-data-models'\nimport WordTestData from './lib/engine/data/test-data'\nimport DefaultConfig from './config.json'\n\nclass TuftsAdapter extends BaseAdapter {\n  /**\n   * A Morph Client Adapter for the Tufts Morphology Service\n   * @constructor\n   * @param {object} engine an object which maps language code to desired engine code\n                            for that language. E.g. { lat : whitakerLat, grc: morpheusgrc }\n   */\n  constructor (config = null) {\n    super()\n    if (config == null) {\n      try {\n        this.config = JSON.parse(DefaultConfig)\n      } catch (e) {\n        this.config = DefaultConfig\n      }\n    } else {\n      this.config = config\n    }\n    this.engineMap = new Map(([ Whitakers, Morpheusgrc, Aramorph ]).map((e) => { return [ e.engine, e ] }))\n  }\n\n  getEngineLanguageMap (lang) {\n    return this.engineMap.get(this.config.engine[lang][0])\n  }\n\n  prepareRequestUrl (lang, word) {\n    let engine = this.config[lang]\n    let url = this.config.url.replace('r_WORD', word).replace('r_ENGINE', engine).replace('r_LANG', lang)\n    return url\n  }\n\n  fetchTestData (lang, word) {\n    return new Promise((resolve, reject) => {\n      try {\n        let wordData = new WordTestData().get(word)\n        let json = JSON.parse(wordData)\n        resolve(json)\n      } catch (error) {\n                // Word is not found in test data\n        reject(error)\n      }\n    })\n  }\n\n  /**\n   * A function that maps a morphological service's specific data types and values into an inflection library standard.\n   * @param {object} jsonObj - A JSON data from a Morphological Analyzer.\n   * @param {object} targetWord - the target of the analysis\n   * @returns {Homonym} A library standard Homonym object.\n   */\n  transform (jsonObj, targetWord) {\n    'use strict'\n    let lexemes = []\n    let annotationBody = jsonObj.RDF.Annotation.Body\n    if (!Array.isArray(annotationBody)) {\n            /*\n            If only one lexeme is returned, Annotation Body will not be an array but rather a single object.\n            Let's convert it to an array so we can work with it in the same way no matter what format it is.\n             */\n      annotationBody = [annotationBody]\n    }\n    let provider\n    for (let lexeme of annotationBody) {\n            // Get importer based on the language\n      let language = lexeme.rest.entry.dict.hdwd.lang\n      let mappingData = this.getEngineLanguageMap(language)\n      let lemma = mappingData.parseLemma(lexeme.rest.entry.dict.hdwd.$, language)\n      if (!provider) {\n        let providerUri = jsonObj.RDF.Annotation.about\n        let providerRights = ''\n        if (jsonObj.RDF.Annotation.rights) {\n          providerRights = jsonObj.RDF.Annotation.rights.$\n        }\n        provider = new Models.ResourceProvider(providerUri, providerRights)\n      }\n      let meaning = lexeme.rest.entry.mean\n      let shortdef\n      if (meaning) {\n        let lang = meaning.lang ? meaning.lang : 'eng'\n        shortdef = new Models.Definition(meaning.$, lang, 'text/plain')\n      }\n      let inflections = []\n      let inflectionsJSON = lexeme.rest.entry.infl\n      if (!Array.isArray(inflectionsJSON)) {\n                // If only one inflection returned, it is a single object, not an array of objects. Convert it to an array for uniformity.\n        inflectionsJSON = [inflectionsJSON]\n      }\n      for (let inflectionJSON of inflectionsJSON) {\n        let inflection = new Models.Inflection(inflectionJSON.term.stem.$, mappingData.language.toCode())\n        if (inflectionJSON.term.suff) {\n                    // Set suffix if provided by a morphological analyzer\n          inflection.suffix = inflectionJSON.term.suff.$\n        }\n\n        if (inflectionJSON.xmpl) {\n          inflection.example = inflectionJSON.xmpl.$\n        }\n                // Parse whatever grammatical features we're interested in\n        if (inflectionJSON.pofs) {\n          inflection.feature = mappingData[Models.Feature.types.part].get(inflectionJSON.pofs.$)\n        }\n\n        if (inflectionJSON.case) {\n          inflection.feature = mappingData[Models.Feature.types.grmCase].get(inflectionJSON.case.$)\n        }\n\n        if (inflectionJSON.decl) {\n          inflection.feature = mappingData[Models.Feature.types.declension].get(inflectionJSON.decl.$)\n        }\n\n        if (inflectionJSON.num) {\n          inflection.feature = mappingData[Models.Feature.types.number].get(inflectionJSON.num.$)\n        }\n\n        if (inflectionJSON.gend) {\n          inflection.feature = mappingData[Models.Feature.types.gender].get(inflectionJSON.gend.$)\n        }\n\n        if (inflectionJSON.conj) {\n          inflection.feature = mappingData[Models.Feature.types.conjugation].get(inflectionJSON.conj.$)\n        }\n\n        if (inflectionJSON.tense) {\n          inflection.feature = mappingData[Models.Feature.types.tense].get(inflectionJSON.tense.$)\n        }\n\n        if (inflectionJSON.voice) {\n          inflection.feature = mappingData[Models.Feature.types.voice].get(inflectionJSON.voice.$)\n        }\n\n        if (inflectionJSON.mood) {\n          inflection.feature = mappingData[Models.Feature.types.mood].get(inflectionJSON.mood.$)\n        }\n\n        if (inflectionJSON.pers) {\n          inflection.feature = mappingData[Models.Feature.types.person].get(inflectionJSON.pers.$)\n        }\n\n        inflections.push(inflection)\n      }\n\n      let lexmodel = new Models.Lexeme(lemma, inflections, shortdef)\n      let providedLexeme = Models.ResourceProvider.getProxy(provider, lexmodel)\n      lexemes.push(providedLexeme)\n    }\n    return new Models.Homonym(lexemes, targetWord)\n  }\n\n  async getHomonym (lang, word) {\n    let jsonObj = await this.fetch(lang, word)\n    if (jsonObj) {\n      let homonym = this.transform(jsonObj, word)\n      return homonym\n    } else {\n        // No data found for this word\n      return undefined\n    }\n  }\n}\n\nexport default TuftsAdapter\n"],"names":["Models.Lemma","Models.FeatureImporter","Models.LatinLanguageModel","Models.Feature","Models.Constants","data","Models.GreekLanguageModel","types","Models.ArabicLanguageModel","Whitakers","Morpheusgrc","Aramorph","Models.ResourceProvider","Models.Definition","Models.Inflection","Models.Lexeme","Models.Homonym"],"mappings":"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"}